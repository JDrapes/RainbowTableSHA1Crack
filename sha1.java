/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cryptographypractical;

/**
 *
 * @author jordandraper
 */
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;

import java.security.MessageDigest;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

public class sha1 extends javax.swing.JFrame {

    /**
     * Creates new form sha1
     */
    public sha1() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField2 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("HASH");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jTextField1.setText("jTextField1");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextField2.setText("jTextField2");

        jButton2.setText("Brute force");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jLabel1.setText("Use SHA1 to hash your password");

        jLabel2.setText("Enter hash below and brute force ");

        jButton3.setText("Clear");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel3.setText("Set A (6 char len)");

        jLabel4.setText("Set B (BCH numbers)");

        jTextField3.setText("jTextField3");

        jButton4.setText("Brute force");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(133, 133, 133)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 190, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                            .addComponent(jTextField3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton4)
                            .addComponent(jButton2))
                        .addGap(194, 194, 194))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton4)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:

        String rawString = jTextField1.getText();

        try {
            System.out.println("SHA1 hash of string: " + PasswordDemo.SHA1(rawString));
            jTextArea1.setText("SHA1 hash of string: " + PasswordDemo.SHA1(rawString));
            jTextField2.setText(PasswordDemo.SHA1(rawString));
            jTextField3.setText(PasswordDemo.SHA1(rawString));

        } catch (NoSuchAlgorithmException e) {
            // TODO Auto-generated catch block 
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            // TODO Auto-generated catch block 
            e.printStackTrace();
        }


    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // TODO add your handling code here:
        //Clear button
        jTextField1.setText("");
        jTextField2.setText("");
        jTextArea1.setText("");
        jTextArea2.setText("");
        jTextField3.setText("");
    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        try {
            // TODO add your handling code here:
            //Button for brute forcing the SHA
            //Need to take the hashed password and set that as our target goal
            String rawString = jTextField2.getText();
            String targetSHA;
            boolean solved = false; //initialisation

            //NEED VALIDATION TO 
            targetSHA = rawString; //targetSHA is the hash we want to see when attempting to hash a word

            //
            //Ran through dictionary... Now can try random every single possible letter and number.
            String[] letters = {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"};

            //Setting the char to a (start of the letter set)
            String letter1 = "a";
            String letter2 = "a";
            String letter3 = "a";
            String letter4 = "a";
            String letter5 = "a";
            String letter6 = "a";

            String LetterCombo;
            String HashedLetterCombo;

            //Cycle all length 1
            for (int i = 0; i < 36; i++) {
                letter1 = letters[i];
                LetterCombo = letter1;
                HashedLetterCombo = PasswordDemo.SHA1(LetterCombo);
                System.out.println("Trying to brute with: " + LetterCombo);
                if (HashedLetterCombo.equals(targetSHA)) {
                    System.out.println("The solution was found... " + LetterCombo);
                    jTextArea2.setText("The solution was found... " + LetterCombo);
                    return;
                }
            }

            //Cycle all length 2
            for (int i = 0; i < 36; i++) {
                letter1 = letters[i];
                for (int x = 0; x < 36; x++) {
                    letter2 = letters[x];
                    LetterCombo = letter1 + letter2;
                    HashedLetterCombo = PasswordDemo.SHA1(LetterCombo);
                    System.out.println("Trying to brute with: " + LetterCombo);
                    if (HashedLetterCombo.equals(targetSHA)) {
                        System.out.println("The solution was found... " + LetterCombo);
                        jTextArea2.setText("The solution was found... " + LetterCombo);
                        return;
                    }
                }
            }

            //Cycle all length 3
            for (int i = 0; i < 36; i++) {
                letter1 = letters[i];
                for (int x = 0; x < 36; x++) {
                    letter2 = letters[x];
                    for (int j = 0; j < 36; j++) {
                        letter3 = letters[j];
                        LetterCombo = letter1 + letter2 + letter3;
                        HashedLetterCombo = PasswordDemo.SHA1(LetterCombo);
                        System.out.println("Trying to brute with: " + LetterCombo);
                        if (HashedLetterCombo.equals(targetSHA)) {
                            System.out.println("The solution was found... " + LetterCombo);
                            jTextArea2.setText("The solution was found... " + LetterCombo);
                            return;
                        }
                    }
                }
            }
            
            //Cycle all length 4 
            for (int i = 0; i < 36; i++) {
                letter1 = letters[i];
                for (int x = 0; x < 36; x++) {
                    letter2 = letters[x];
                    for (int j = 0; j < 36; j++) {
                        letter3 = letters[j];
                        for (int s = 0; s < 36; s++) {
                            letter4 = letters[s];
                            LetterCombo = letter1 + letter2 + letter3 + letter4;
                            HashedLetterCombo = PasswordDemo.SHA1(LetterCombo);
                            System.out.println("Trying to brute with: " + LetterCombo);
                            if (HashedLetterCombo.equals(targetSHA)) {
                                System.out.println("The solution was found... " + LetterCombo);
                                jTextArea2.setText("The solution was found... " + LetterCombo);
                                return;
                            }
                        }
                    }
                }
            }

            //Cylce all length 5
            for (int i = 0; i < 36; i++) {
                letter1 = letters[i];
                for (int x = 0; x < 36; x++) {
                    letter2 = letters[x];
                    for (int j = 0; j < 36; j++) {
                        letter3 = letters[j];
                        for (int s = 0; s < 36; s++) {
                            letter4 = letters[s];
                            for (int z = 0; z < 36; z++) {
                                letter5 = letters[z];
                                LetterCombo = letter1 + letter2 + letter3 + letter4 + letter5;
                                System.out.println("Trying to brute with: " + LetterCombo);
                                HashedLetterCombo = PasswordDemo.SHA1(LetterCombo);
                                if (HashedLetterCombo.equals(targetSHA)) {
                                    System.out.println("The solution was found... " + LetterCombo);
                                    jTextArea2.setText("The solution was found... " + LetterCombo);
                                    return;
                                }
                            }
                        }
                    }
                }
            }

            //Cycle all length 6
            for (int i = 0; i < 36; i++) {
                letter1 = letters[i];
                for (int x = 0; x < 36; x++) {
                    letter2 = letters[x];
                    for (int j = 0; j < 36; j++) {
                        letter3 = letters[j];
                        for (int s = 0; s < 36; s++) {
                            letter4 = letters[s];
                            for (int z = 0; z < 36; z++) {
                                letter5 = letters[z];
                                for (int n = 0; n < 36; n++) {
                                    LetterCombo = letter1 + letter2 + letter3 + letter4 + letter5 + letter6;
                                    System.out.println("Trying to brute with: " + LetterCombo);
                                    HashedLetterCombo = PasswordDemo.SHA1(LetterCombo);
                                    if (HashedLetterCombo.equals(targetSHA)) {
                                        System.out.println("The solution was found... " + LetterCombo);
                                        jTextArea2.setText("The solution was found... " + LetterCombo);
                                        return;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            //RANDOM DICT ATTACK FOR +6 CHAR HANDLE
            //Assigning the word to check
            String DictionaryWord;
            String DictionaryWordHash;
            String ReverseDictionaryWord;
            Scanner sc = new Scanner(new File("/Users/jordandraper/Desktop/Files/University/Year 3/ESD/cryptographyPractical/src/cryptographypractical/Dictionary.0"));
            while (sc.hasNext() && (solved == false)) {

                DictionaryWord = sc.nextLine(); //Read the file line by line

                DictionaryWordHash = PasswordDemo.SHA1(DictionaryWord);

                //If they have an unmodified dictionary entry I will find it here
                if (DictionaryWordHash.equals(targetSHA)) {
                    System.out.println("your password: " + DictionaryWord);
                    jTextArea2.setText(DictionaryWord);
                    solved = true;
                } else {

                    //test if the password matches a reversed dictionary entry
                    ReverseDictionaryWord = new StringBuilder(DictionaryWord).reverse().toString();
                    DictionaryWordHash = PasswordDemo.SHA1(ReverseDictionaryWord);
                    if (DictionaryWordHash.equals(targetSHA)) {
                        System.out.println("your password: " + ReverseDictionaryWord);
                        jTextArea2.setText(ReverseDictionaryWord);
                        solved = true;
                    }
                }

                //test if the password matches a dictionary entry without its vowels
                //test if the password matches changing letters to numbers??
            }

        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(sha1.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(sha1.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(sha1.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        try {
            // TODO add your handling code here:

            //Code for the 10 char long number BCH crack
            //NEED VALIDATION TO DENY IT IF ITS NOT VALID BCH.
            String rawString = jTextField1.getText();
            String targetSHA;
            String HashedLetterCombo;

            targetSHA = jTextField3.getText(); //targetSHA is the hash we want to see when attempting to hash a word
            //Set all char to 0 (start of the char set)
            String[] BCH = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"};
            String letter1 = "0";
            String letter2 = "0";
            String letter3 = "0";
            String letter4 = "0";
            String letter5 = "0";
            String letter6 = "0";
            String letter7 = "0";
            String letter8 = "0";
            String letter9 = "0";
            String letter10 = "0";
            String LetterCombo;

            //Cycle through all numbers from 00000000 to 99999999 etc. if VALID BCH only 
            for (int a = 0; a < 10; a++) {
                letter1 = BCH[a];
                for (int b = 0; b < 10; b++) {
                    letter2 = BCH[b];
                    for (int c = 0; c < 10; c++) {
                        letter3 = BCH[c];
                        for (int z = 0; z < 10; z++) {
                            letter4 = BCH[z];
                            for (int e = 0; e < 10; e++) {
                                letter5 = BCH[e];
                                for (int f = 0; f < 10; f++) {
                                    letter6 = BCH[f];
                                    for (int g = 0; g < 10; g++) {
                                        letter7 = BCH[g];
                                        for (int h = 0; h < 10; h++) {
                                            letter8 = BCH[h];
                                            for (int i = 0; i < 10; i++) {
                                                letter9 = BCH[i];
                                                for (int j = 0; j < 10; j++) {
                                                    letter10 = BCH[j];
                                                    LetterCombo = letter1 + letter2 + letter3 + letter4 + letter5 + letter6 + letter7 + letter8 + letter9 + letter10;

                                                    //Adding BCH
                                                    //6digit BCH check below...
                                                    int[] d = new int[16];
                                                    String s;
                                                    s = letter1 + letter2 + letter3 + letter4 + letter5 + letter6;

                                                    d[0] = Integer.parseInt(String.valueOf(s.charAt(0)));
                                                    d[1] = Integer.parseInt(String.valueOf(s.charAt(1)));
                                                    d[2] = Integer.parseInt(String.valueOf(s.charAt(2)));
                                                    d[3] = Integer.parseInt(String.valueOf(s.charAt(3)));
                                                    d[4] = Integer.parseInt(String.valueOf(s.charAt(4)));
                                                    d[5] = Integer.parseInt(String.valueOf(s.charAt(5)));

                                                    //d7 = (4*d1+10*d2+9*d3+2*d4+d5+7*d6) mod 11 
                                                    d[6] = ((4 * d[0] + 10 * d[1] + 9 * d[2] + 2 * d[3] + d[4] + 7 * d[5]) % 11);

                                                    //d8 = (7*d1+8*d2+7*d3+d4+9*d5+6*d6) mod 11 
                                                    d[7] = ((7 * d[0] + 8 * d[1] + 7 * d[2] + d[3] + 9 * d[4] + 6 * d[5]) % 11);

                                                    //d9 = (9*d1+d2+7*d3+8*d4+7*d5+7*d6) mod 11 
                                                    d[8] = ((9 * d[0] + d[1] + 7 * d[2] + 8 * d[3] + 7 * d[4] + 7 * d[5]) % 11);

                                                    //d10 = (d1+2*d2+9*d3+10*d4+4*d5+d6) mod 11
                                                    d[9] = ((d[0] + 2 * d[1] + 9 * d[2] + 10 * d[3] + 4 * d[4] + d[5]) % 11);

                                                    if (d[6] == 10 || d[7] == 10 || d[8] == 10 || d[9] == 10) {
                                                        System.out.println("Unusable number, skipping");
                                                    } else {
                                                        //Hash
                                                        HashedLetterCombo = PasswordDemo.SHA1(LetterCombo);
                                                        System.out.println("Testing combination: " + LetterCombo);
                                                        if (HashedLetterCombo.equals(targetSHA)) {
                                                            System.out.println("The solution was found... " + LetterCombo);
                                                            jTextArea2.setText("The solution was found... " + LetterCombo);
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(sha1.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(sha1.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jButton4MouseClicked

    private static String convertToHex(byte[] data) {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < data.length; i++) {
            int halfbyte = (data[i] >>> 4) & 0x0F;
            int two_halfs = 0;
            do {
                if ((0 <= halfbyte) && (halfbyte <= 9)) {
                    buf.append((char) ('0' + halfbyte));
                } else {
                    buf.append((char) ('a' + (halfbyte - 10)));
                }
                halfbyte = data[i] & 0x0F;
            } while (two_halfs++ < 1);
        }
        return buf.toString();
    }

    public static String SHA1(String text)
            throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance("SHA-1");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes("iso-8859-1"), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(sha1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(sha1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(sha1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(sha1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new sha1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
